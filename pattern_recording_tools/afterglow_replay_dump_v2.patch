diff --git a/src/wpc/wpc.c b/src/wpc/wpc.c
index 2a651ee0..a4d10e25 100644
--- a/src/wpc/wpc.c
+++ b/src/wpc/wpc.c
@@ -14,6 +14,26 @@
 #include "p-roc/p-roc.h"
 #endif
 
+
+#define AFTERGLOW_OUTPUT
+#ifdef AFTERGLOW_OUTPUT
+typedef struct AG_LAMP_SWITCH_s
+{
+    UINT16 col : 3;    // lamp column
+    UINT16 row : 3;    // lamp row
+    UINT16 dttag : 2; // delta time tag [20ms] to the last event
+} AG_LAMP_SWITCH_t;
+
+#define AG_TTAG_SCALING (20.0 / 1000.0) // 20ms steps
+#define AG_DTMAX 3 // maximum dttag value
+
+#define AG_NUM_COL 8
+#define AG_NUM_ROW 8
+#define AG_NUM_LAMP_SWITCHES 256000  // Replay size [events]
+static UINT8 ag_lamp_status[AG_NUM_COL][AG_NUM_ROW] = {0};
+#endif
+
+
 #define PRINT_GI_DATA      0 /* printf the GI Data for debugging purposes   */
 #define DEBUG_GI           0 /* debug GI PWM code - more printf stuff basically */
 #define DEBUG_GI_W         0 /* debug GI write - even more printf stuff */
@@ -23,7 +43,7 @@
                              /* Also see notes above the wpc_vblank routine for DMD timings */
 /*-- no of DMD frames to add together to create shades --*/
 /*-- (hardcoded, do not change)                        --*/
-#define DMD_FRAMES         3 /* Some early machines like T2 could in some few animations (like T2 attract mode) profit from more shades, but very tricky to get right without flicker ! */
+#define DMD_FRAMES         3/* Some early machines like T2 could in some few animations (like T2 attract mode) profit from more shades, but very tricky to get right without flicker ! */
 
 /*-- Smoothing values --*/
 #if defined(PROC_SUPPORT) || defined(PPUC_SUPPORT)
@@ -582,6 +602,100 @@ static INTERRUPT_GEN(wpc_vblank) {
 #endif
     memcpy(coreGlobals.lampMatrix, coreGlobals.tmpLampMatrix, sizeof(coreGlobals.tmpLampMatrix));
     memset(coreGlobals.tmpLampMatrix, 0, sizeof(coreGlobals.tmpLampMatrix));
+
+#ifdef AFTERGLOW_OUTPUT
+	//fprintf(stdout, "setLamp %.6lf %d %d %d\n", timer_get_time(), col, row, (UINT8)row);
+    // update the lamp core_status
+    static double ag_first_event = 0.0;
+    static UINT32 ag_dttag_tot = 0;
+    static UINT32 ag_num_events = 0;
+    UINT32 cbit = 1;
+	/*
+    fprintf(stdout, "\nal %.6lf 0x%02X %d%d%d%d%d%d%d%d\n", timer_get_time(), coreGlobals.lampMatrix[7],
+        ((coreGlobals.lampMatrix[7] >> 0) & 0x01), ((coreGlobals.lampMatrix[7] >> 1) & 0x01),
+        ((coreGlobals.lampMatrix[7] >> 2) & 0x01), ((coreGlobals.lampMatrix[7] >> 3) & 0x01),
+        ((coreGlobals.lampMatrix[7] >> 4) & 0x01), ((coreGlobals.lampMatrix[7] >> 5) & 0x01),
+        ((coreGlobals.lampMatrix[7] >> 6) & 0x01), ((coreGlobals.lampMatrix[7] >> 7) & 0x01));
+	*/
+    for (UINT8 c=0; c<AG_NUM_COL; c++)
+    {
+        UINT8 rd = coreGlobals.lampMatrix[c];
+        for (UINT8 r=0; r<AG_NUM_ROW; r++)
+        {
+            UINT8 newStatus = (rd & 0x01) ? 1 : 0;
+            // handle lamp status changes
+            if (newStatus != ag_lamp_status[c][r])
+            {
+                double now = timer_get_time();
+
+                // update the status
+                ag_lamp_status[c][r] = newStatus;
+
+                // adjust the reference time if necessary
+                if (ag_first_event == 0.0)
+                {
+                    ag_first_event = now;
+                }
+                double dt_first = (now - ag_first_event);
+                UINT32 dttag_first = (UINT32)((dt_first / AG_TTAG_SCALING) + 0.5);
+                UINT16 dttag = (UINT16)(dttag_first - ag_dttag_tot);
+                ag_dttag_tot += (UINT32)dttag;
+
+                // create a new event
+                if (ag_num_events < AG_NUM_LAMP_SWITCHES)
+                {
+					// single event for (dttag<=AG_DTMAX)
+					if ((dttag <= AG_DTMAX) &&
+						((c != 7) || (r != 7) || (dttag < AG_DTMAX)))
+					{
+						ag_num_events++;
+						// print the event
+						fprintf(stdout, "{%u, %u, %u}, ", c, r, dttag);
+						if (ag_num_events % 10 == 0)
+						{
+							if (ag_num_events % 50 == 0)
+							{
+								fprintf(stdout, "  // +%.3lfs %u", dt_first, ag_dttag_tot*20);
+							}
+							fprintf(stdout, "\n");
+						}
+					}
+					// 3 byte code for longer events
+					else
+					{
+						for (UINT32 ev=0; ev<3; ev++)
+						{
+							ag_num_events++;
+							if (ev==0)
+							{
+								fprintf(stdout, "{7, 7, 3}, "); // 3 byte event marker
+							}
+							else if (ev==1)
+							{
+								fprintf(stdout, "{%u, %u, %u}, ", c, r, dttag & 0x3);
+							}
+							else if (ev==2)
+							{
+								fprintf(stdout, "{%u, %u, %u}, ", (dttag>>2)&0x7, (dttag>>5)&0x7, dttag>>8);
+							}
+							if (ag_num_events % 10 == 0)
+							{
+								if (ag_num_events % 50 == 0)
+								{
+									fprintf(stdout, "  // +%.3lfs %u", dt_first, ag_dttag_tot*20);
+								}
+								fprintf(stdout, "\n");
+							}
+						}
+					}
+                }
+            }
+            rd >>= 1;
+        }
+    }
+#endif
+
+
   }
   if ((wpclocals.vblankCount % (WPC_VBLANKDIV*WPC_DISPLAYSMOOTH)) == 0) {
     if ((core_gameData->gen & GENWPC_HASDMD) == 0) {
